* ComposeFUSE

View your .XCompose file as a file-system---though God only knows why you'd want to.

This program presents the contents of a =.XCompose= file as if it were a file-system.  The directories represent keystrokes down to a file, which contains the character(s) rendered.  That is, if you take the path down to a leaf (a file), the names of the directories (and the file) will be the keys you need to press to get that character.

So if your =.XCompose= file contains a line that says

:    <Multi_key> <colon> <minus> <parenright> : "☺"  U263A

then your directory tree will look like:

:    (mount-point)
:        Multi_key/
:            colon/
:                minus/
:                    parenright

and the file "parenright" would contain the single character ☺.

The program also displays your comments: all the comment lines before a given entry are placed in a file which has the same name as the file for that entry (i.e. the name of the last keystroke) suffixed with =-COMMENTS=, and inline comments at the end of the line are in a file suffixed with =-INLINE=.

All this is useful because when you unmount the directory tree, CompuseFUSE can write the information back out to a new file in =.XCompose= format, in the order it originally was and with the comments and everything, so you can actually edit the file by messing around with the directory tree.

** Other important things I haven't written yet

*** Format of lines

:    Keys  : "char" UF00F  # UNICODE CHARACTER NAME

*** Double-#'s are important somehow

They distinguish between stock inline comments with the Unicode character name and custom inline comments.

*** How to use

Something like

:   composeFS.py -o infile=$HOME/.XCompose,outfile=ThisOutFile /mount/point

You can use multiple infiles by separating them with =|= characters---just be sure to quote them from the shell.  You should use absolute paths at least for the infile, since (when run in the background) python fuse doesn't seem to have the same notion of current directory.

The =outfile= is optional.

*** Controlling line placement

The line number is available on a "file" as the number of *seconds* since 1 January 1970 00:00:00 (the UNIX epoch).  Use ~ls -l --time-style=+%s"﻿~ to see it.  *NOTE*: Since nobody cares about the exact number and just their relative placement counts, so in a future release this very likely will be changed to show *days* since the epoch and not seconds, so you won't have to mess around with annoying =ls= switches.  So you will be able to rearrange lines by changing their dates (with =touch=).

*** Compress mode

Include =compress= as one of the options in the mount and nested singleton directories will be compressed into single files (or dirs) with names consisting of all the (former) directory names separate by commas.

So if your =.XCompose= file had a line like

:    <Multi_key> <Multi_key> <n> <e> <p> <t> <u> <n> <e> : "♆" U2646	# NEPTUNE

(and let's say nothing else that started with =<Multi_key> <Multi_key> <n>=), without =compress= your directory structure would look like:

:    Multi_key/
:        # Other Multi_key things...
:        Multi_key/
:            # Other Multi_key Multi_key things...
:            n/
:                e/
:                    p/
:                        t/
:                            u/
:                                n/
:                                    e

but with =compress= it will be:

:    Multi_key/
:        # Other Multi_key things...
:        Multi_key/
:            # Other Multi_key Multi_key things...
:            n,e,p,t,u,n,e

*** Why?

Because.
